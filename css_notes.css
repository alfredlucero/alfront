/*
  Flexbox: gives containers the ability to alter items' width/height (and order) to best fill
  the available space, can expand items to fill available free space or shrink them to prevent overflow
  - more appropriate to the components of an application and small-scale layouts vs. large-scale for Grid
  - requires vendor prefixing to support most browsers possible, can use Autoprefixer
*/

/* Properties for the parent */

/* 
  display: flex
  Enables a flex context for all it direct children 
*/
.container {
  display: flex;
}

/* 
  flex-direction
  Establishes main axis, laying out in horizontal rows or vertical columns
*/
.container {
  flex-direction: row | row-reverse | column | column-reverse;
}

/*
  flex-wrap
  Default all flex items try to fit onto one line, can make items wrap as needed
*/
.container {
  flex-wrap: nowrap | wrap | wrap-reverse;
}

/*
  flex-flow
  Shorthand for flex-direction and flex-wrap properties (main and cross axes)
  Default is row nowrap
*/
.container {
  flex-flow: <'flex-direction'> || <'flex-wrap'>;
}

/*
  justify-content
  Defines the alignment along the main axis, distributing the free space
*/
.container {
  justify-content: flex-start | flex-end | center | space-between |    
                   space-around | space-evenly;
}

/*
  align-items 
  Defines how flex items laid out along cross-axis (perpendicular to main axis)
*/
.container {
  align-items: flex-start | flex-end | center | baseline | stretch;
}

/*
  align-content
  Aligns a flex container's lines within when there is extra space in the cross-axis
*/
.container {
  align-content: flex-start | flex-end | center | space-between | space-around | stretch;
}

/* Properties for the Children */

/*
  order
  Default laid out in source order
*/
.item {
  order: <integer>;
}

/*
  flex-grow
  Defines ability for flex item to grow if necessary
  If all items have it set to 1, equally distributed space to all children
*/
.item {
  flex-grow: <number>;
}

/*
  flex-shrink
  Ability to shrink if necessary
*/
.item {
  flex-shrink: <number>;
}

/*
  flex-basis
  Defines the default size of an element before the remaining space is distributed
  Can be a length such as 20%, 5em, etc. or a keyword such as auto to look at width/height property
  content keyword means the size it based on the item's content
*/
.item {
  flex-basis: <length> | auto;
}

/*
  flex
  Shorthand for flex-grow, flex-shrink, and flex-basis
  Default is 0 1 auto, second and third parameters (shrink and basis) optional
*/
.item {
  flex: none | [<'flex-grow'> <'flex-shrink'>? || <'flex-basis'>];
}

/*
  align-self
  Allows default alignment to be overridden by individual flex-items
*/
.item {
  align-self: auto | flex-start | flex-end | center | baseline | stretch;
}

/*
  CSS Grid Layout - 2-dimensional system dealing with columns and rows
  - must display: grid; on container element and set column and row sizes with 
  grid-template-columns and grid-template-rows and then place child elements into
  grid with grid-column and grid-rows
  - powerful module to rearrange grid with media queries and order items
  - container: direct parent of all grid items;
  - item: children direct descendants of grid container;
  - line: dividing lines that make up the structure of the grid (vertical or horizontal);
  - track: space between two adjacent grid lines like the columns or rows;
  - cell: space between two adjacent row and two adjacent column grid lines, single unit of grid;
  - area: total area surrounded by four grid lines;
*/

/* Properties for the Parent */

/*
  display: grid | inline-grid | subgrid;
  Defines the element as a grid container and establishes a new grid formatting context for its contents
*/
.container {
  display: grid | inline-grid | subgrid;
}

/*
  grid-template-columns grid-template-rows
  Defines the columns and rows of the grid with a space-separated list of values
  Values represent the track size and space between them represents grid line
*/
.container {
  grid-template-columns: <track-size> ... | <line-name> <track-size>;
  grid-template-rows: <track-size> ... | <line-name> <track-size>;
}

/* 
  Can use repeat() notation to streamline as well 
  Or one can use fr unit to set size of track as fraction of free space of grid container
*/
.container {
  grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];
  grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];
}

/*
  grid-template-areas
  Defines a grid template by referencing the names of the grid areas which are specified with the grid-area property
  Repeating the name of a grid area causes content to span those cells. Period signifies empty cell
*/
.container {
  grid-template-areas: "<grid-area-name> | . | none";
}

/* Sample Grid Layout */
.item-a {
  grid-area: header;
}
.item-b {
  grid-area: main;
}
.item-c {
  grid-area: sidebar;
}
.item-d {
  grid-area: footer;
}

.container {
  grid-template-columns: 50px 50px 50px 50px;
  grid-template-rows: auto;
  grid-template-areas: 
    "header header header header"
    "main main . sidebar"
    "footer footer footer footer";
}

/*
  grid-template
  Shorthand for setting grid-template-rows, grid-template-columns, and grid-template-areas
*/
.container {
  grid-template: none | subgrid | <grid-template-rows> / <grid-template-columns>;
}

/*
  grid-column-gap grid-row-gap
  Specifies the size of the grid lines like setting width of gutters between columns/rows
*/
.container {
  grid-column-gap: <line-size>;
  grid-row-gap: <line-size>;
}

/*
  grid-gap
  Shorthand for grid-row-gap and grid-column-gap
*/
.container {
  grid-gap: <grid-row-gap> <grid-row-columns>;
}

/*
  justify-items
  Aligns the content inside a grid item along the row axis
*/
.container {
  justify-items: start | end | center | stretch;
}

/*
  align-items
  Aligns the content inside a grid item along the column axis
*/
.container {
  align-items: start | end | center | stretch;
}

/*
  justify-content
  When total size of grid less than size of grid container, can align grid
  along the row axis
*/
.container {
  justify-content: start | end | center | stretch | space-around | space-between | space-evenly;
}

/*
  align-content
  When total size of grid less than size of grid container, can align grid
  along the column axis
*/
.container {
  align-content: start | end | center | stretch | space-around | space-between | space-evenly;
}

/*
  grid-auto-columns grid-auto-rows
  Specifies the size of any auto-generated grid tracks
  Implicit grid tracks get created when you explicitly position rows or columns
  that are out of range of the defined grid
*/
.container {
  grid-auto-columns: <track-size>;
  grid-auto-rows: <track-size>;
}

/*
  grid-auto-flow
  If you have grid items that you don't explicitly place on grid, auto-placement algorithm kicks in 
  to automatically place the items
*/
.container {
  grid-auto-flow: row | column | dense;
}

/*
  grid
  Shorthand for setting all of the properties in a single declaration such as grid-template-rows,
  grid-template-columns, grid-template-areas, grid-auto-rows, grid-auto-columns, grid-auto-flow,
  grid-column gap, grid-row-gap
*/
.container {
  grid: none | <grid-template-rows> / <grid-template
}

/* Properties for the Children Grid Items */

/*
 grid-column-start grid-column-end grid-row-start grid-row-end
 Determines a grid's location within the grid by referring to specific grid lines 
*/

.item {
  grid-column-start: <number> | <name> | span <number> | span <name> | auto
  grid-column-end: <number> | <name> | span <number> | span <name> | auto
  grid-row-start: <number> | <name> | span <number> | span <name> | auto
  grid-row-end: <number> | <name> | span <number> | span <name> | auto
}

/*
  grid-column grid-row
  Shorthand for grid-column-start + grid-column-end and grid-row-start + grid-row-end
*/
.item {
  grid-column: <start-line> / <end-line> | <start-line> / span <value>;
  grid-row: <start-line> / <end-line> | <start-line> / span <value>;
}

/*
  grid-area
  Gives an item a name so that it can be referenced by a template created with the grid-template-areas
  property
*/
.item {
  grid-area: <name> | <row-start> / <column-start> / <row-end> / <column-end>;
}

/*
  justify-self
  Aligns the content inside a grid item along the row axis
*/
.item {
  justify-self: start | end | center | stretch;
}


/*
  align-self
  Aligns the content inside a grid item along the column axis
*/
.item {
  align-self: start | end | center | stretch;
}


/*
  General Tricks and Hacks
  - apply pseudo-elements on broken images
  - contain: strict reduces painting costs
  - fluid type with font-size: calc(1em + 1vw)
  - nested links with <object>
  - highlight row/column with pseudo-elements
  - control table-layout with table-layout: fixed
  - padded lines with the box-shadow trick
  - consider critical progressive CSS (HTTP/2)
  - use object-fit: cover to letterbox images;
  - use native variables with CSS currentColor
  - use Font Loading API to load web fonts
  - service workers can boost performance a lot (offline, caching, etc)
*/







