Preload:
<link rel="preload"> is a declarative fetch directive
- tells a browser to start fetching a certain resource because we know the browser is going to need that
resource soon for the next navigation
- prefetch's main use case is speeding up the next navigation rather than the current one
- as attribute to set the right resource priority, browser make sure it is subject to right 
Content-Security-Policy directives, appropriate Accept headers based on resource type,
does not block the window's onload event
- load late-discovered resources early such as web fonts and need crossorigin attribute
i.e. <link rel="preload" href="late_discovered_thing.js" as="script">

HTTP/2:
- helps with head of line blocking, uncompressed headers, server push
- server push allows you to send site assets to the user before they've even asked for them
- typically send request and get back first index.html and then retrieve other CSS/JS assets
but server push lets you preemptively push website assets to client without user asking for them
- potentially decrease rendering time of page to avoid inline CSS and JS in HTML, data URI scheme
- usually involves using the Link HTTP header like
i.e. Link: </css/styles.css>; rel=preload; as=style
- check for pushed assets in Chrome dev tools, gray dot in Firefox, nghttp
- may push too much stuff and may not be cached, need to configure HTTP/2 server correctly
- may start with pushing site CSS and then other assets

RAIL (Steve Kinney): model to break down user's experience into key actions and provides performance goals
- Response: input latency, see something within 100 ms even if just loading indicator
- Animation: such ass CSS animations/scrolling, UI changes should happen in 16ms windows or else slow animation
down below 60 frames per second ("jank"), use CSS will-change to inform the browser of which elements and properties
will change
- Idle: run analytics, initialize components, fetching data, batch into 50ms tasks so user actions can slip in
- Page Load: getting to first meaningful paint in under 1 second, prioritize critical rendering path, for SPAs time to
interaction is important, and deferring subsequent non-essential loads to periods of idle time  or lazy-laoding them on
demand (code splitting)
- Perception reaction times: 0-100ms (instant), 100-300ms (slight delay), 300-1000ms (task focus, perceptible delay),
1000+ms mental context switch, 10000+ms I'll come back later
- Goal: deliver interactive content in < 1000ms to keep user engaged, progressive rendering
- Interesting facts:
-> Aberdeen Group found that a 1 second slow down resulted 11% fewer page views, 7% less conversion
http://www.gomez.com/wp-content/downloads/Aberdeen_WebApps.pdf
-> A two-second delay in web page load time increase bounce  rates by 103 percent
https://www.akamai.com/us/en/about/news/press/2017-press/akamai-releases-spring-2017-state-of-online-retail-performance-report.jsp
-> A 400 ms improvement in performance resulted in a 9% increase in traffic at Yahoo.
https://www.slideshare.net/stoyan/dont-make-me-wait-or-building-highperformance-web-applications#btnNext
-> Google found that a 2% slower page resulted in 2% fewer searches, which means 2% fewer ads shown
http://assets.en.oreilly.com/1/event/29/Keynote%20Presentation%202.pdf
-> 100ms improvement in performance results in 1% increase in overall revenue at Amazon
http://radar.oreilly.com/2008/08/radar-theme-web-ops.html
-> According to research, if you want user to feel like your site is faster than your competitors, you need to be 20%
faster.

Progressive Web Apps (PWA):
- lets you load quickly even on flaky networks and sends relevant push notifications, icon on home screen, and loads as
a top-level full-screen experience, becomes more powerful as user builds relationship with app over time
- progressive in sense that it works for every user regardless of browser, responsive, connectivity independent
meaning services workers to work offline or on low-quality networks
- app-like, fresh, safely served via HTTPS, discoverable as an "application", re-engageable with push notifications,
installable, linkable via URL
- app's shell: minimal HTML, CSS, and JS required to power user interface of PWA; first load should be extremely quick
and immediately cached locally using a service worker (loaded once over network and then saved to local device) 
- service worker: script your browser runs in the background, separate from a web page
-> can't access DOM directly, can communicate with pages it controls by responding to messages sent via the postMessage
interface and those pages can manipulate the DOM if needed, programmable network proxy, terminated when not in use
(if there is information you need to persist and reuse across restarts, service workers do have access to IndexedDBAPI)
-> make extensive use of promises
-> life cycle -> installing -> activated/error -> idle -> fetch/message or terminated
- Should ask: What needs to be on screen immediately? What supporting resources needed for app shell?
- i.e. have loader visible by default to see loader immediately as page loads

SEO Notes: https://udemy.com/seo-roadmap/learn/v4/overview
- 3 SEO steps to bring to top of search results: keyword research, content optimization, building authority with links
- need to implement SEO for an individual webpage basis for Google search results
- Keyword Research: brainstorm and build list of 50-70 keyword ideas, narrow down list by assessing keyword search volumes
with Google Keyword Planner Tool, finalize your keyword selection by assessing the competition
-> Some tools for keyword brainstorming: wikipedia (Think Laterally), reddit.com (Go Deep), ubersuggest.org (Go Long Tail - 2 to 3 words)
-> Go to Google AdWords to research how many searches there are for those keywords/competition/bidding
-> Moz bar chrome extension to see competitive keywords, page authority, domain authority on Google Search results
-> look for around 30-40 page authority so we can show up on top results with those keywords with content optimization/link building
-> typically more words and more specific descriptions have lower competition so you can show up at top of results for those
-> look at bid prices because ads pay high prices per click and see how valuable the keywords are, competition relates to the auction not the SEO
- Page optimization: to appear more often based on keywords
-> URL optimization: use readable URLs only, keyword rich URLs, short, use hyphens in urls never underscore
-> Title tags: keywords here too for what people will be searching as clost to front as possible, can see it in tab as well, people often put location too, 
keep it <= 55 chars, make sure other webpages have distinct titles too
-> Optimizing descriptions underneath title tag: include keywords, show value proposition, start with a verb, can see them in search results, focus, <= 156 characters,
have unique descriptions for every page
-> heading tag and copy optmization: 
