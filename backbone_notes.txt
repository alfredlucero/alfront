Backbone: lightweight library for MVC/MV* kind of framework
- backbonejs.org, uses Underscore.js for utility functions
- Views are like controllers in MVC, so more like MV*
- Routers for SPA, works with building rich-client app over set of REST APIs

Backbone components:
- events: to add an object the ability to pub/sub events
- models: application data
- collections: set of models
- views: to render models and listen for DOM/model events
- routers: to create SPA

Models:
- containers for application data

// Sample Backbone model
var Song = Backbone.Model.extend({
	initialize: function() {
		console.log('A new song has been created.');
	}
});

var song = new Song();
// Has attributes such as changed, attributes, cid, etc.

var Song = Backbone.Model.extend();
var song = new Song();

// Setting attributes object properties
song.set('title', 'Hello darkness');
song.set({
	artist: 'Pogs',
	publishYear: 2017
});
// can convert it to JSON representation by doing song.toJSON();

var newSong = new Song({ title: 'Alala' });
// To get an attribute value
newSong.get('title');

// To remove an attribute
song.unset('title');

// To clear all attributes
song.clear();

// To see if it has a given attribute
song.has('title');

// Setting default properties in model
var Song = Backbone.Model.extend({
	defaults: {
		genre: 'Jazz'
	}
});

/* Working with attributes: set, get, has, unset, clear */

// Validation
var Song = Backbone.Model.extend({
	validate: function(attrs) {
		if (!attrs.title) { return "Title is required"; }

	}
});

var song = new Song();

// Checks if attributes are validated 
song.isValid();

// Gives validation error message
var lastError = song.validationError;

/* Inheritance */
var Animal = Backbone.Model.extend({
	walk: function() {
		console.log("Animal walking...");
	}
});

var Dog = Animal.extend({
	walk: function() {
		// To call the super walk function
		Animal.prototype.walk.apply(this);

		console.log("Dog walking...");
	}
});

var dog = new Dog();
dog.walk();

/* Connecting to the server */
Persistent operations such as fetch() - GET
save() - POST/PUT
destroy() - DELETE

i.e. gotta set the urlRoot: '/api/songs' before updating
var Song = Backbone.Model.extend({
	idAttribute: 'songId'
});
var song = new Song({ songId: 1 });

// Or destroy
song.fetch({
	success: function() {},
	error: function() {}
});

// First arg is hash of attributes to set and save
song.save({}, {
	success: function() {},
	error: function() {}
});

// Updating a model, PUT /api/songs/1
var song = newn Song({ id: 1 });
song.fetch();
...
song.set('title', 'newTitle');
song.save();

// Inserting a model POST /api/songs
var song = new Song();
song.set('title', 'newTitle');
song.save();

// Deleting a model DELETE /api/songs/1
var song = new Song({ id: 1 });
song.destroy();


Collections: ordered set of models, have length and models property array

// Example of setting up a collection
var Song = Backbone.Model.extend();
var Songs = Backbone.Collection.extend({
	model: Song
});

var songs = new Songs([
	new Song({ title: 'Song 1' }),
	new Song({ title: 'Song 2' })
]); 

// Provided by underscore for these methods
songs.add(new Song({ title: 'Song 3'}));
songs.at(0); // cid of c1, client id to keep track of objects
songs.get("c1");
songs.remove(songs.at(0));
songs.length;

// Can specify index where you want to insert model
songs.add(new Song({ title: 'Song 4'}), { at: 0 });

// Adding to the end
songs.push(new Song({ title: 'Song 5' }));

// Removing from the end
song.pop();

// Returns an array of those matching attributes, equality comparison
var thirdSong = songs.where({ title: 'Song 3' });

// Returns first instance matching attributes
songs.findWhere({ title: 'Song 2' });

// Custom filtering with predicate function
var topDownloads = songs.filter(function(song) {
	return song.get('downloads') > 100;
});

// To loop through each of the items in collection
songs.each(function(song) {
	console.log(song);
});

/* Connecting to the server with collections */
// GET /api/songs
var Songs = Backbone.Collection.extend({
	model: Song,
	url: '/api/songs'
});

var songs = new Songs();
// GET /api/songs?page=2
songs.fetch({
	data: {
		page: 2
	},
	success: function() {},
	error: function() {}
});


Views: responsible for rendering the content, handling model and DOM events
- more like controllers, have a DOM element
/* Creating Views */
var SongView = Backbone.View.extend({
	render: function() {
		this.$el.html("Hello world");

		return this;
	}
});

var songView = new SongView({ el: '#container' });
songView.render();

// $('#container').html(songView.$el); by default an empty div
// Can specify your own tag, class, attributes, etc.
var SongView = Backbone.View.extend({
	tagName: 'span',
	className: 'song',
	id: '1234',
	attributes: {
		'data-genre': 'Jazz'
	},
	render: function() {
		this.$el.html('Hello world');

		return this;
	}
});

var songView = new SongView();
songView.render();
// $('#container').html(songView.render().$el);

/* Passing data to views */

// Passing a model to a view
var Song = Backbone.Model.extend();

// Passing a collection to a view
var Songs = Backbone.Collection.extend({
	model: Song
});

var SongView = Backbone.View.extend({
	render: function() {
		this.$el.html(this.model.get('title'));

		return this;
	}
});

var SongsView = Backbone.View.extend({
	render: function() {
		var self = this;

		this.model.each(function(song) {
			var songView = new SongView({ model: song });
			self.$el.append(songView.render().$el);
		});
	}
});

var song = new Song({ title: 'Blue in Green' });

var songs = new Songs([
	new Song({ title: 'Blue in Green' }),
	new Song({ title: 'So what' }),
	new Song({ title: 'All Blues' })
]);

var songView = new SongView({ el: '#container', model: song });
songView.render();

var songsView = new SongsView({ el: '#container', model: songs });
songsView.render();

/* Handling DOM events */
var Song = Backbone.Model.extend();

var SongView = Backbone.View.extend({
	events: {
		'click': 'onClick',
		'click .bookmark': 'onClickBookmark'
	},

	onClick: function() {
		console.log('Listen clicked');
	},

	onClickBookmark: function() {
		e.stopPropagation();

		console.log('Bookmark clicked');
	},

	render: function() {
		this.$el.html(this.model.get('title') + ' <button>Listen</button> <button class="bookmark">Bookmark</button>');

		return this;
	}
});

var song = new Song({ title: 'Blue in Green' });
var songView = new SongBiew({ el: '#container', model: song });
songView.render();

/* Handling model events */
Real-time notifications:
- polling (client keeps asking the server, costly as app grows)
- pushing (server tells the client)

var Song = Backbone.Model.extend({
	defaults: {
		listeners: 0
	}
});

var SongView = Backbone.View.extend({
	initialize: function() {
		// All models publish change event when one of attributes change
		// say when you use .set() on model, third parameter sets the context
		this.model.on('change', this.onModelChange, this);
	},

	onModelChange: function() {	
		this.$el.addClass('someClass');
	},

	render: function() {
		this.$el.html(this.model.get('title') + ' - Listeners: ' + this.model.get('listeners'));

		return this;
	}
});

var song = new Song({ title: 'Blue in Green' });

var songView = new SongView({ el: '#container', model: song });
songView.render();

song.set('listeners', 1);

/* Handling collection events */
var Song = Backbone.Model.extend();

var Songs = Backbone.Collection.extend({
	model: Song
});

var SongView = Backbone.View.extend({
	tagName: 'li',

	render: function() {
		this.$el.html(this.model.get('title'));
		this.$el.attr('id', this.model.id);

		return this;
	}
});

var SongsView = Backbone.View.extend({
	tagname: 'ul',

	initialize: function() {
		// Adding song to songs collection
		this.model.on('add', this.onSongAdded, this);
		// Removing song from songs collection
		this.model.on('remove', this.onSongRemoved, this);s
	},

	onSongAdded: function(song) {
		var songView = new SongView({ model: song });

		this.$el.append(songView.render().$el);
	},

	onSongRemoved: function(song) {
		// this.$el.find('li#'+ song.id).remove();
		this.$('li#' + song.id).remove();
	},

	render: function() {
		var self = this;

		this.model.each(function(song) {
			var songView = new SongView({ model: song });
			self.$el.append(songView.render().$el);
		});
	}
});

var songs = new Songs([
	new Song({ id: 1, title:  'Song 1'}),
	new Song({ id: 2, title: 'Song 2' })
]);

var songsView = new SongsView({ el: '#songs', model: songs });
songsView.render();

/* Templating like with UnderscoreJS/MustacheJS/HandlebarsJS */
var Song = Backbone.Model.extend();

var SongView = Backbone.View.extend({
	render: function() {
		var template = _.template($('#songTemplate').html());
		var html = template(this.model.toJSON());
		this.$el.html(html);

		return this;
	}
});

var song = new Song({ title: 'Blue in Green', plays: 101 });

var songView = new SongView({ el: '#container', model: song });
songView.render();

// UnderscoreJS templating support, compiles markup with template function and passing in model data, give id to look up templates
// <script id="songTemplate" type="text/html">
//	<%= title %>
//	<button>Listen</button>
// 	<% if (plays > 1000) { %>
		<span class="popular">Popular</span>
//  <% } %>
// </script


Events:
/* Binding and triggering custom events */

var person = {
	name: 'Mosh',

	walk: function() {
		// Trigger to publish events
		this.trigger('walking', {
			speed: 1,
			startTime: '08:00'
		});
	}
};

// Backbone events
_.extend(person, Backbone.Events);

// Subscribe to walking events
person.on('walking', function(e) {
	console.log('Person is walking');
	console.log('Event args', e);
});

// To unsubscribe from events
person.off('walking');

person.walk();

/* Creating an event aggregator to coordinate multiple views */
- So not directly coupled, can listen to multiple events for multiple views to communicate

// VenueView doesn't directly know MapView, on click of venue, update MapView by passing model of current VenueView to get title
var Venue = Backbone.Model.extend();
var Venues = Backbone.Collection.extend({
	model: Venue
});

var VenueView = Backbone.View.extend({
	tagName: 'li',

	initialize: function(options) {
		this.bus = options.bus;
	},

	events: {
		'click': 'onClick'
	},

	onClick: function() {
		this.bus.trigger('venueSelected', this.model);
	},

	render: function() {
		this.$el.html(this.model.get('name'));

		return this;
	}
});

var VenuesView = Backbone.View.extend({
		tagName: 'ul',

		id: 'venues',

		// Need a reference to bus to communicate with MapView
		initialize: function(options) {
			this.bus = options.bus;
		},

		render: function() {
			var self = this;

			this.model.each(function(venue) {
				var view = new VenueView({ model: venue, bus: self.bus });
				self.$el.append(view.render().$el);
			});
		}
});

var MapView = Backbone.View.extend({
	el: '#map-container',

	initialize: function(options) {
		this.bus = options.bus;

		this.bus.on('venueSelected', this.onVenueSelected, this);
	},

	onVenueSelected: function(venue) {
		this.model = venue;
		this.render();
	},

	render: function() {
		if (this.model)
			this.$('#venue-name').html(this.model.get('name'));

			return this;
	}
});

var bus = _.extend({}, Backbone.Events);

var venues = new Venues([
	new Venue({ name: 'One Venue' }),
	new Venue({ name: 'Second Venue' }),
	new Venue({ name: 'Third Venue' })
]);

var venuesView = new VenuesView({ model: venues, bus: bus });
$('#venues-container').html(venuesView.render().$el);

var mapView = new MapView({ bus: bus });
mapView.render();


/* Routers */
SPA - routing done on client, no page reload, most resources on client, click on link, change browser's address and present new content

var ArtistsView = Backbone.View.extend({
	render: function() {
		this.$el.html('Artist view');

		return this;
	}
});

var AlbumsView = Backbone.View.extend({
	render: function() {
		this.$el.html('Albums view');

		return this;
	}
});

var GenresView = Backbone.View.extend({
	render: function() {
		this.$el.html('Genre view');

		return this;
	}
});

// Creating a router with routes for different views
var AppRouter = Backbone.Router.extend({
	routers: {
		// If it goes to address/albums, it will load viewAlbums function to render album view
		'albums': 'viewAlbums',
		'albums/:albumId': 'viewAlbumById',
		'artists': 'viewArtists',
		'genres': 'viewGenres',
		// Default for any other route
		'*other': 'defaultRoute'
	},

	viewAlbums: function() {
		var view = new AlbumsView({ el: '#container' });
		view.render();
	},

	viewAlbumById: function(albumId) {

	},

	viewArtists: function() {
		var view = new ArtistsView({ el: '#container' });
		view.render();
	},

	viewGenres: function() {
		var view = new GenresView({ el: '#container' });
		view.render();
	},

	defaultRoute: function() {

	}
});

// Instantiate the router
var router = new AppRouter();
// Listens for changes to browser address
Backbone.history.start();

// In HTML
<nav id="nav">
<ul>
<li data-url="albums">Albums</li>
<li data-url="artists">Artists</li>
<li data-url="genres">Genres</li>
</ul>
</nav>

// Handle clicks on nav URLs
var NavView = Backbone.View.extend({
	events: {
		'click': 'onClick'
	},

	onClick: function(e) {
		var $li = $(e.target);
		router.navigate($li.attr('data-url'), { trigger: true });
	}
});

var navView = new NavView({ el: '#nav' });

/* Modularizing Backbone Applications */
Place all models in models folder
Place all views in views folder
Asynchronous module definition with Require.JS
i.e.
// Model definition
define([
	'underscore',
	'backbone'
], function(_, Backbone) {
	var Song = Backbone.Model.extend();

	return Song;
});

// View definition
define([
	'jquery'
	'underscore',
	'backbone',
	'models/song'
], function($, _, Backbone, Song) {
	var SongView = Backbone.View.extend({
		render: function() {
			this.$el.html(this.model.get('title'));

			return this;
		}
	});

	return SongView;
});

// App Module
define([
	'underscore',
	'backbone',
	'models/song',
	'views/songView'
], function(_, Backbone, Song, SongView) {
	var initialize = function() {

	};

	return {
		initialize: initialize
	};
}); 

// Main Module
require.config({
	paths: {
		jquery: 'lib/jquery-min',
		underscore: 'lib/underscore-min',
		backbone: 'lib/backbone-min'
	}
});

define(['app'], function(App) {
	App.initialize();
});


/* Testing Backbone Applications with Jasmine */
Jasmine - Behavior driven development library
- specs/tests, grouped by suites
- jasmine.js, jasmine-html.js, boot.js
- spec/SpecHelper.js, spec/PlayerSpec.js for src/Player.js
var Calculator = function() {
	var add = function(a, b) {
		if (!a || !b) {
			throw new Error('The add method expects two arguments');
		}

		return a + b;
	}

	return {
		add: add
	};
}

// Suite of tests
describe('Calculator', function() {
	var calculator;

	beforeEach(function() {
		calculator = new Calculator();
	});

	afterEach(function() {

	});
	
	describe('add', function() {
		it('should be able to add 2 numbers', function() {
			var result = calculator.add(2, 3);

			expect(result).toEqual(5);
		});

		it('should throw an error if both arguments are not provided', function() {
			expect(function() {
				calculator.add(1);
			}).toThrow();
		});

		it('should be called with the right arguments', function() {
			// Mocked out function, check if function is called
			// Can simulate return values/errors
			spyOn(calculator, 'add').and.returnValue(7);

			//spyOn(calculator, 'add').and.throwError('someError');
			/*
				expect(function() {
					var result = calculator.add(2, 5);
				}).toThrowError('someError');
			*/
			var result = calculator.add(2, 5);

			// expect(result).toBeUndefined();
			expect(result).toEqual(7);

			expect(calculator.add).toHaveBeenCalled();

			expect(calculator.add).toHaveBeenCalledWith(2, 5);
		});
	});
});

// Testing Models
- Mostly state changes, validation, defaults, url routes, etc.

// SongModel
var Song = Backbone.Model.extend({
	urlRoot: '/api/songs',

	defaults: {
		numberOfPlays: 0
	},

	validate: function(attrs) {
		if (!attrs.title)
			return 'Title is required.';
	},

	play: function() {
		var numberOfPlays = this.get('numberOfPlays');
		this.set('numberOfPlays', numberOfPlays + 1);
	}
});

// SongSpec
describe('Song', function() {
	var song;

	beforeEach(function() {
		song = new Song();
	});

	it('urlRoot should be /api/songs', function() {
		expect(song.urlRoot).toEqual('/api/songs');
	});

	it('numberOfPlays attribute should be 0 by default', function() {
		expect(song.get('numberOfPlays')).toEqual(0);
	});

	it('title is required', function() {
		expect(song.isValid()).toBeFalsy();

		song.set('title', 'Blue in Green');

		expect(song.isValid()).toBeTruthy();
	});

	it('play should increment the numberOfPlays', function() {
		song.play();

		expect(song.get('numberOfPlays')).toEqual(1);
	});
});

/* Testing Backbone Collections */
// AlbumCollection
var Album = Backbone.Collection.extend({
	model: Song,

	url: '/api/songs',

	getPopularSong: function() {
		if (this.length === 0) {
			return undefined;
		}

		var sortedSongs = this.sortBy(function(song) {
			return song.get('numberOfPlays');
		});

		return sortedSongs[sortedSongs.length - 1];
	}
});

// AlbumSpec
describe('Album', function() {
	var album;

	beforeEach(function() {
		album = new Album();
	});

	it('url should be /api/songs', function() {
		expect(album.url).toEqual('/api/songs');
	});

	describe('getPopularSong', function() {
		it('should return undefined if the collection is empty', function() {
			expect(album.getPopularSongs()).toBeUndefined();
		});

		it('should return the song with the highest number of plays if the collection is not empty', function() {
			var song1 = new Song({ title: 'Blue in Green', numberOfPlays: 10 });
			var song2 = new Song({ title: 'So What', numberOfPlays: 5 });

			album.add(song1);
			album.add(song2);

			expect(album.getPopularSong()).toEqual(song1);
		});
	});
});

/* Testing Backbone Views */
- Initial setup for tagName, className, etc.
- Rendering logic, DOM/model events
- use jasmine-jquery
- Put a spy on model's fetch(), save(), or destroy() methods to mock out the server backend functionality, don't spy on jQuery ajax or create a fake server with Sinon.js and inspect URLs and params

var Tweet = Backbone.Model.extend();
...
var TweetView = Backbone.View.extend({
	tagName: 'li',

	className: 'tweet',

	initialize: function() {
		this.model.on('change', this.render, this);
	},

	events: {
		'click #delete': 'onClickDelete',
		'click #expand': 'onClickExpand'
	},

	onClickDelete: function() {
		if (confirm('Are you sure?')) {
			this.model.destroy();
		}
	},

	onClickExpand: function() {
		var self = this;
		this.model.fetch({
			success: function() {
					self.$el.append('<div class="details">' + self.model.get('retweets') + ' retweets</div>');
			},

			error: function() {

			}
		});
	},

	render: function() {
		this.$el.html('<div class="tweet">' + this.model.get('body') + ' <button id="expand"></button><button id="delete"></button>');

		return this;
	}
});

describe('TweetView', function() {
	var view;
	var model;

	beforeEach(function() {
		model = new Tweet();
		view = new TweetView({ model: model });
		view.render();
	});

	it('tagName should be li', function() {
		expect(view.tagName).toEqual('li');
	});

	it('className should be tweet', function() {
		expect(view.className).toEqual('tweet');
	});

	it('should refresh when model state changes', function() {
		model.set('body', 'updated');

		expect(view.$el).toContainText('updated');
	});

	describe('when clicking delete', function() {
		it('should display a confirmation box', function() {
			spyOn(window, 'confirm');

			view.$el.find('#delete').click();

			expect(window.confirm).toHaveBeenCalled();
		});

		it('should destroy the model if the user confirms', function() {
			spyOn(window, 'confirm').and.returnValue(true);

			spyOn(model, 'destroy');

			view.$el.find('#delete').click();

			expect(model.destroy).toHaveBeenCalled();
		});
	});

	describe('when clicking expand', function() {
		it('should load the details if successful', function() {
			spyOn(model, 'fetch').and.callFake(function(options) {
				var tweet = {
					retweets: 10,
					favorites: 5
				};

				model.set(tweet);

				options.success();
			});

			view.$el.find('#expand').click();

			expect(view.$el.find('.details')).toBeDefined();
			expect(view.$el.find('.details')).toContainText('10 retweets');
		});
	});
});
