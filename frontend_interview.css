/* 
 * Frontend Interview Notes for All Things CSS 
 * - Cascading Style Sheets: stylesheet language to describe presentation of document written in HTML or XML
 * - describes how elements should be rendered, standardized across browsers according to W3C spec and developed in levels like CSS3
 */

/*
 * I. CSS Box Model
 * - browser's rendering engine represents each element in document as rectangular box according to CSS basic box model
 * - every box composed of four parts defined by respective edges: content edge, padding edge, border edge, and margin edge
 * - content area bounded by content edge contains things like text, image, or video player and dimensions are content width/height
 * and it may have background color or background image
 * -> if box-sizing is set to context-box (default), content area's size can be defined with width/min/max-width or height/min/max-height
 * - padding area bounded by padding edge extends content area to include element's padding (padding-box width/height) and when content area
 * has background, it extends into padding
 * - border area bounded by border edge and extends padding area to include element's borders (border-box width/height)
 * -> thickness of borders determined by border-width and shorthand border properties
 * -> if box-sizing property set to border-box, border area's size can be explicitly defined with min/max width and min/max height
 * - margin area bounded by margin edge extends border area to include empty area used to separate elment from its neighbors (margin-box width/height)
 * - all HTML elements considered as boxes and wraps around every HTML element: margins, borders, padding, actual content
 * -> width = width + padding-left + padding-right + border-left + border-right
 * -> height = height + padding-top + padding-bottom + border-top + border-bottom
 * -> margin is taken outside of border and it affects containers' width/height but doesn't affect element
 * -> if you don't declare a width and box has static or relative positioning, the width will remain 100% in width and padding and border will push inwards instead of outwards
 * but if you explicitly set width of box to be 100%, the padding will push the box outward as normal
 * -> absolute box's width is only as wide as it needs to be to hold content
 */

/* 
 * II. CSS Cascade
 * - cascade: algorithm that defines how to combine property values originating from different sources
 * - only CSS declarations (property/value pairs) participate in cascade, meaning that at-rules containing entities other than
 * declarations such as a @font-face rule containing descriptors do not participate
 * -> declarations in most at-rules like @media, @document or @supports participate but declarations in @keyframes don't and only at-rule as whole is selected
 * - goal is to select CSS declarations to set the correct value for CSS properties
 * -> browser has basic style sheet that gives a default style to any document = user-agent stylesheets
 * -> web developers often use a CSS reset style sheet to force common property values to a known state as browsers may have many differences on their user-agent styles
 * -> author of web page defines styles for document; reader may have custom stylesheet to tailor its experience
 * - though stylesheets come from different origins, they overlap in scope
 * - algorithm determines how to find value to apply for each property for each document element
 * 1. filters all rules from different sources to keep only rules that apply to a given element like those rules whose selector matches
 * given element and which are part of an appropriate media at-rule
 * 2. sorts rules according to their importance (whether or not followed by !important) and by origin;
 * cascade is in ascending order which means !important values from user-defined style sheet have precedence over normal values from user-agent style sheet
 * i.e. user agent, user, author, CSS animations, author !important, user !important, user agent !important
 * 3. in case of equality, the specificity of a value is considered to choose one or the other (how browsers decide which CSS property values are most relevant to an element
 * and therefore applied, based on matching rules and number of each selector type in the matching selector)
 * i.e. if equal specificity, last declaration found applied to element; specificity applied when same element targeted by multiple declarations
 * directly targeted elements will always take precedence over rules which an element inherits from its ancestor
 * -> can take advantage of specificity when global CSS file affects site, you inline styles on elements themselves
 * -> 0: type selector (h1) and pseudo-elements (::before, ::after, ::selection, ::first-line), 1: class selectors (.example), attributes selectors ([type="radio"]), pseudo-classes (:hover),
 * and 2: ID selectors (#example)
 * -> universal selector (*) and combinators (+, >, ~, ' ') and :not() with no effect on specificity
 * -> inline styles added to an element always overwrite any styles in external stylesheets and has highest specificity
 * - @keyframes never mix multiple CSS values together
 * - Specificity Matrix: if multiple CSS selectors are targeting the same element to assign same property/properties, selector with highest specificity value will win
 * -> inline styles (style="" in document) = a
 * -> count number of #ID attributes in selector = b
 * -> count number of class, attributes, pseudo-classes (.classes, [attributes], :hover, :focus, etc.) in selector = c
 * -> count number of element names (div, p, :before, :after, etc.) in selector = d
 * -> concatenating three number a-b-c-d in number system with large base (different browsers use different bases)
 */

/*
 * III. Basic Usage
 * - can be included in HTML file like <link href="styles/style.css" rel="stylesheet" type="text/css"> between <head> tags
 * or in <style> tags or inline with style attribute in HTML elements like style="...some styles"
 * - create rules like for a selected group of elements with certain style declarations
 * -> selector: selects the elements to be styled; declaration: single rule like color: blue; that specifies which of element's
 * properties you want to style; rule set wrapper in curly braces, semicolons to separate each declaration
 */
.selector {
  color: blue;
}

/*
 * IV. CSS Selectors
 * - element selector (or tag/type selector): selects all HTML elements of the specified type
 * i.e. p selects all <p> tags
 * - ID selector: selects element on page with specified ID (only allowed one element per ID)
 * i.e. #my-id selects element with id="my-id"
 * - Class selector: selects elements on page with specified class (mutiple class instances can appear on page)
 * i.e. .my-class selects all elements with class="my-class"
 * - Attribute selector: selects elements with specified attribute
 * i.e. img[src] selects <img src="myimage.png"> but not <img> or selecting data-* attributes like [data-role=submit]
 * - Pseudo-class selector: selects specified elements but only when in specified state like being hovered over
 * i.e. a:hover selects <a> only when mouse pointer is hovering over link
 * - Combinators
 * -> not a combinator like group of selectors A, B - any element matching A and/or B
 * -> descendant: A B - any element matching B that is a descendant of element matching A aka child or child of a child
 * -> child selector: A > B - any element matching B that is direct child of an element matching A
 * -> adjacent sibling: A + B - any element matching B that is the next sibling of an element matching A (next child of same parent)
 * -> general sibling selector: A ~ B - any element matching B that is one of the next siblings of an element matching A (one of next children of same parent)
 */
main p {
  font-size: 16px;
}

/*
 * V. CSS Pseudo-classes and Pseudo-elements
 * Pseudo-class: keyword added to a selector that specifies a special state of the selected elements, use single colon
 * - i.e. :hover to change button color on user hover
 * - can also style in relation to external factors like history of navigator with links i.e. :visited
 * or status of content like :checked on form elements or nth-child like :first-child, :first-of-type
 * - more examples like nth-child(), nth-of-type(), :active(), :focus(), etc.
 * Pseudo-elements: can be used to style a specific part of an element, use double colon
 * - i.e. p::first-line to change font of first line of paragraph, ::after, ::before, ::first-letter, ::placeholder, etc.
 */
div:hover {
  background-color: #ffffff;
}

/*
 * VI. CSS Layouts
 * - multi-column layout module: extends the block layout mode to allow the easy definition of multiple columns of text
 * -> can use column-count (sets number of columns to a particular number) and column-width (minimum desired column width)
 * -> content automatically flowed from one column into the next as needed
 * -> shorthand columns property; column heights must be balanced, can set height/max-height
 * -> column-gap for space between columns, recommended 1em
 * -> for graceful degradation: should use vendor prefixes for -moz, -webkit, and without prefix for backwards compatibility, will display as single column
 * if not supported
 * - inline layout for laying out text
 * - table layout for laying out tables
 * - positioned layout for positioning elements without much interaction with other elements
 * - flexible box layout for laying out complex pages that can be resized smoothly (flexbox)
 * -> designed as a one-dimensional layout and to provide space distribution between items and alignment capabilities
 * -> two axes: main axis (defined by flex-direction) and cross axis (runs perpendicular)
 * -> flex-direction: row, row-reverse, column, column-reverse; row = inline direction, column - block direction
 * - grid layout for laying out elements relative to a fixed grid
 */
/* Multi-columns */
#col {
  -moz-column-count: 2;
  -webkit-column-count: 2;
  column-count: 2;
}

#wid {
  -moz-column-width: 100px;
  -webkit-column-width: 100px;
  column-width: 100px;
}

#columns_4 {
  -moz-columns: 4;
  -webkit-columns: 4;
  columns: 4;
}

/* 
  Flexbox Model 
  - two axes: main and cross axis; main axis defined by flex-direction property, cross axis runs perpendicular to it
  -> row/row-reverse = along inline direction; column/column-reverse = along block direction
  -> if flex-direction = row, cross axis runs along columns; if main axis is column, cross axis runs along rows
  - makes no assumption about writing mode of document i.e. thinking in start and end of axis vs. left and right to account for different languages
  - area of document laid out using flexbox = flex container i.e. display: flex; and children become flex items
  -> items display in a row (flex-direction row by default), items start from start edge of main axis, items do not stretch on main dimension
  but can shrink
  -> items will stretch to fill size of cross axis; flex basis set to auto, flex-wrap set to nowrap
  -> items lined up in a row with size of content as size in main axis, will overflow if more items than can fit in container, all items
  will stretch along cross axis to fill its full size
  - if you want flex items to wrap onto multiple lines, consider each line as a new flex container and any space distribution will happen across
  that line without reference to the lines either side
  -> use flex-wrap: wrap (nowrap by default in which items may shrink to fit or overflow otherwise)
  - flex-flow shorthand combines both flex-direction and flex-wrap
  - properties applied to flex items like flex-grow, flex-shrink, and flex-basis
  - concept of available space; flexbox will put space after last item if it doesn't take up whole line
  -> flex-basis: defines the size of item in terms of space it leaves as available space (default auto which checks
  that the items have a size; if no size the content's size is used as flex-basis
  -> flex-grow: set to positive integer, flex items can grow along main axis from their flex-basis, causing item to stretch
  and take up any available space on that axis or a proportion of available space if other items allowed to grow
  i.e. all items with flex-grow of 1 then available space in flex container equally shared between items and stretch to fill container on main axis
  i.e. can distribute space in proportion flex-grow 2 vs. 2 flex grow 1 equals 100px, 50px, 50px out of 200px container
  -> flex-shrink: controls how space is taken away in main axis
  i.e. if not enough space in container to lay out our items and set to positive integer, item can be smaller than flex-basis
  - using shorthand flex (combines flex-grow, flex-shrink, flex-basis)
  -> flex-grow with positive value means it can grow, flex-shrink with positive value can shrink only if total values overflow main axis,
  flex-basis = value the items using as base value to grow and shrink from (limited by max|min-width, width is fallback when it's missing)
  flex-basis = size of flex items before they are placed into a flex container, not a guaranteed size however
  -> flex: initial (0 1 auto = 0 - won't grow larger than basis; 1 - can shrink rather than overflow; auto = items will either use any size set
  or they'll get their size from content size) | auto (flex 1 1 auto = items can grow and shrink) | none (0 0 auto)
  - Alignment, justification, and distribution of free space between items
  -> align-items: align items on cross axis (default is stretch to fill flex container height) -> flex-start, flex-end, center
  -> justify-content: align items on main axis, the direction in which flex-direction has set flow (default is flex-start) -> flex-start/end, center, space-around, space-between, space-evenly
  -> align-self: controls alignment of individual flex item on cross axis
  -> align-content: "packing flex lines", controls space between flex lines on cross axis
  - cross browser compatibility concerns with IE 10 - display: flexbox and -ms- prefix, UC Browser display: box and -webkit- prefix, IE 11 with display:flex bugs
  -> can have fallbacks to overwrite one layout method with another
  -> float and clear do not create floating or clearance of flex item and do not take it out of flow (flex overrides float so you can test by removing flex)
  -> display: inline-block is blockified after applying flex and can't preserve white space between items
  -> display: table-cell for anonymous boxes to represent items so you don't need to wrap each item in wraper to represent HTML table row (flex overrides this too)
  - feature queries to detect flexbox support - IE 11 does not support feature queries though
  i.e. @supports (display: flex) { ... code for supporting browsers } 
*/
.box {
  display: flex;
  flex-direction: row-reverse;
}

.box-flow {
  display: flex;
  flex-flow: row wrap;
}
/* Using flex shorthand i.e. all equal width on main axis 
  - for three equally-sized items even if they start out at different sizes => flex: 1 1 0;
  -> can then set up ratios of sizes of items using 1 1 0 or 2 1 0 (for one item is 2x bigger than other)
  -> items can't grow with no positive free space and won't shrink unless negative free space
  -> in 1D method like flexbox we only control row or column but with 2D layout like grid we control both at same time
  -> use flexbox for space distribution row by row, each flex line acts like a new container
  -> can just control inflexible flex items using percentages i.e. flex: 0 0 33.33%; like float layouts
  -> can use flexbox for fallback for grid layout (once it becomes grid item, flex properties on child elements will be ignored)
  -> flex items can be allowed to wrap but once they do, each line becomes a flex container of its own
  -> when space is distributed, flexbox does not look at placement of items in other rows and tries to line things up with each other (last row will have item take whole width)
  -> grid => can control layout in both rows and columns i.e. grid-template-columns: repeat(auto-fill, minmax(200px, auto)); - last row will have 1 column taking up part width, not whole width
  -> grid great for trying to line up items with the items above them 
*/
.box {
  display: flex;
}

.one {
  flex: 1 1 auto;
}

.two {
  flex: 1 1 auto;
}

.three {
  flex: 1 1 auto;
}
/* i.e. Proper vertical and horizontal alignment */
.box {
  display: flex;
  align-items: center;
  justify-content: center;
}

.box div {
  width: 100px;
  height: 100px;
}
/* Using auto margins for main axis alignment like for navigation bar with items
  aligned to right, some to left, and space in middle
  - auto margins take up all of the space that they can in their axis
*/
.box {
  display: flex;
}
.push {
  margin-left: auto;
}
/* i.e. Space distributed between links in navigation */
nav ul {
  display: flex;
  justify-content: space-between;
}
/* i.e. Pushing the footer down in a card even without much content */
.card {
  display: flex;
  flex-direction: column;
}

.card .content {
  flex: 1 1 auto;
}
/* i.e. for media objects like image or element on one side and text to right */
.media {
  display: flex;
  align-items: flex-start;
}
.media .content {
  flex: 1;
  padding: 10px;
}
.image img {
  max-width: 100px;
}
/* i.e. Form controls like <input> element paired with <button>, input field grows, button doesn't grow */
.wrapper {
  display: flex;
}

.wrapper input[type="text"] {
  flex: 1 1 auto;
}

/* 
  CSS Grid Layout
  - excels at dividing page into major regions or defining relationship in terms of size, position, layout between parts of a control built from HTML primitives
  - align elements into columns and rows like tables, grid container's child elements could position themselves so they actually overlap and layer
  - two-dimensional; grid = intersecting set of horizontal and vertical lines (one set defining columns and the other rows)
  - can create a grid with fixed track sizes using pixels or flexible sizes with percentages or with the new fr unit
  - can place items into precise location on grid using line numbers, names or by targeting an area of the grid
  - creation of additional tracks to hold content i.e. adding as many columns that will fit into container
  - alignment control, control of overlapping content with z-index property
  - grid container = display: grid or display: inline-grid on an element -> all direct children of that element will become grid items
  -> can see grid lines with FireFox Grid Inspector
  - define rows and columns with grid-template-columns and grid-template-rows = grid tracks, the space between any two lines on the grid
  -> tracks can be define using any length unit
  -> fr unit represents a fraction of available space in grid container
  -> can use repeat() function to repeat all or a section of track listing
  -> explicit grid consists of rows and columns defined by grid-template-columns and grid-template-rows
  -> creates implicit grids if place something outside or if more tracks are needed due to amount of content
  -> set size for tracks created in implicit grid with grid-auto-rows and grid-auto-columns i.e. grid-auto-rows: 200px; (200px tall rows)
  -> minmax() function - set rows to be a minimun and maximum of height, auto means size will stretch to give space for tallest item in a cell in this row
  - grid gives us numbered lines to use when positioning items i.e. three column, two row grid we have 4 column lines and 3 row lines
  -> positioning based on line number with grid-column-start/end and grid-row-start/end
  - grid cell is the smallest unit on a grid like a table cell
  - grid area = items spanning one or more cells both by row or by column, must be rectangular
  - gutters or alleys between grid cells can be created with grid-column-gap and grid-row-gap or shorthand grid-gap
  -> any space used by gaps accounted for before space is assigned to flexible length fr tracks and act for sizing purposes
  but cannot place anything into a gap
  -> grid-gap: grid-row-gap grid-column-gap shorthand
  - a grid item can become a grid container, nested grid has no relationship to the parent
  -> subgrid lets us create nested grids that use the track definition of the parent grid, not yet implemented
  - layering items with z-index: grid items can occupy the same cell
  -> can control order in which items stack up by using z-index property (lower index is below)
  - flexbox: do I only need to control the layout by row or column?
    -> works from content out like to space out content evenly in a container, alignment control
  vs. grid: do I need to control layout by row and column?
    -> from layout in, used to align items across rows and columns
  - repeat(auto-fill, 200px) => keeps on filling as many 200px column tracks as will fit the container
  -> repeat(auto-fill, minmax(200px, 1fr)) => flexible tracks aligned by rows and columns
  - grid container as containing block, need to add position property to container with value of relative
  -> can set child as absolute and it will take its containing block as grid container or if item has a grid position, the area of grid
  it was placed into - grid-area, grid container as position:relative
  -> removing position: relative from wrapper positions from the viewport instead
  - display: contents - box normally creates disappears and boxes of child elements appear as if they have risen up a level so
  children of grid item can become grid items
  -> helps nested items act as if they are part of the grid, pre-subgrids
  - grid lines indexed from 1, depends on writing mode of document
  - if you give items no placement information, they will position themselves on grid, one in each grid cell
  - block or column axis and inline or row axis
  -> align-self, align-items to control alignment on block axis -> auto, start, end, center, stretch, baseline
  -> justify-items, justify-self for inline/row axis
  -> order property to change how items auto-place, grid-auto-flow: dense to take items visually out of DOM order
  -> go for visual not logical re-ordering, shouldn't change document source in order to get layout we want
  - support in Firefox, Chrome, Opera, Safari, Edge unprefixed other than Internet Explorer
  - can enhance element in design with grid that could otherwise display using older method
  -> overwriting of legacy methods with grid layout works suprisingly well
  -> floats no longer apply but can use in non-supporting browser, grid item takes precedence
  -> can use feature queries @supports (display: grid) { ... }
  -> display: inline-block and vertical-align does not apply to grid items and ignored once item becomes grid item
*/
/* Creating a grid with three 200px-wide column tracks */
.wrapper-fixed-width {
  display: grid;
  grid-template-columns: 200px 200px 200px;
}
/* Creating three equal width tracks that grow and shrink according to available space */
.wrapper-equal-width {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
}
/* same as this using repeat */
.wrapper-repeat {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
}
/* Mixing fixed with fractional units - 500px column and then remaining width split 1fr (33%) and 2fr (67%) */
.wrapper {
  display: grid;
  grid-template-columns: 500px 1fr 2fr;
}
/* Repeat with track patterns - 10 tracks (1fr followed by 2fr track */
.wrapper {
  display: grid;
  grid-template-columns: repeat(5, 1fr 2fr);
}
/* Gutters/gaps */
.gutter {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-column-gap: 10px;
  grid-row-gap: 1em;
}
/* Overlapping items - can have white space in designs without having to push things around with margins */
.overlap {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-auto-rows: 100px;
}

.box1 {
  grid-column-start: 1;
  grid-column-end: 4;
  grid-row-start: 1;
  grid-row-end: 3;
}

.box2 {
  grid-column-start: 1;
  grid-row-start: 2;
  grid-row-end: 4;
}
/* Line-based placement
  - can use span x to specify number of tracks you would like area to span
  - beware of auto-placement rules
*/
.line-placement {
  grid-column-start: 1;
  grid-column-end: 2;
  grid-row-start: 1;
  grid-row-end: 4;
}
/* Grid-shorthand, grid defaults to spanning one track */
.shorthand {
  grid-column: 1 / 2;
  grid-row: 1 / 4;
}
/* Grid-area: grid-row-start grid-column-start grid-row-end grid-column-end 
  - four flow-relatve directions: block-start, block-end, inline-start, inline-end for writing modes
  - block-start inline-start block-end inline-end
*/
.area {
  grid-area: 1 / 1 / 4 / 2;
}
/* Grid-template-area: to define an area, give it a name and specify location of area
  i.e. header, footer, sidebar, main content
  - can leave cell empty using full stop character '.'
  - span multiple cells by repeating name of grid-area multiple times with white space between them
  - must be rectangular and show a complete grid
  - can use media queries to define grid, position of items -> define names outside media queries
  - shorthand to reset things to initial values that you do not or cannot set in shorthand
  - grid-template
*/
.header {
  grid-area: hd;
}
.footer {
  grid-area: ft;
}
.content {
  grid-area: main;
}
.sidebar {
  grid-area: sd;
}
.layout {
  display: grid;
  grid-template-columns: repeat(9, 1fr);
  grid-auto-rows: minmax(100px, auto);
  grid-template-areas:
    "hd hd hd hd   hd   hd   hd   hd   hd"
    "sd sd sd main main main main main main"
    "ft ft ft ft   ft   ft   ft   ft   ft";
}
/* Media objects: 1fr image, 3fr text */
.media {
  display: grid;
  grid-template-columns: 1fr 3fr;
  grid-template-areas: "img content";
  margin-bottom: 1em;
  max-width: 400px;
  background-color: #fff;
  border-radius: 2px;
  border: 2px solid #eee;
}

.media .image {
  grid-area: img;
  background-color: #eee;
}

.media .text {
  grid-area: content;
  padding: 10px;
}

/*
 * VII. CSS Position
 * - float CSS property: specifies that an elements should be placed along the left or right side of its container, allowing
 * text and inline elements to wrap around it; element removed from normal flow of web page but still part of document
 * -> i.e. none, left, right, inline-start, inline-end; implies use of block layout
 * -> clear: specifies whether an element can be next to floating elements that precede it or must be moved down (cleared) below them
 * i.e. when applied to non-floating blocks, moves border edge of element down until below margin edge of all floats
 * i.e. when applied to floating elements, moves margin edge of element below margin edge of all relevant floats (affects position of later floats since
 * later floats cannot be positioned higher than earlier ones)
 * - margin collapsing: top and bottom margins of blocks are sometimes combined (collapsed) into a single margin whose size is the largest of the individual margins
 * -> occurs with adjacent siblings, parent and first/last child, empty blocks
 * - z-index: specifies z-order of positioned element and its descendants; when elements overlap, z-order determines which one covers the other
 * -> element with larger z-index generally covers an element with a lower one
 * - position: relative, absolute, fixed, or sticky (anything but static)
 * -> relative: top and bottom properties specify vertical offset from its normal position; left and right horizontal offset
 * -> absolute: top, right, bottom, and left specify offsets from edges of element's containing block (ancestor to which the element is relatively positioned);
 * adds margins to offset, removed from normal document flow and no space created for element in page layout
 * relative to nearest parent with relative or absolute positioning; defaults to <html> itself
 * -> fixed: relative to html document/window (viewport), removed from normal document flow, no space created for element in page layout
 * -> sticky: relatively positioned until its containing block cross a specified threshold such as setting top to value other than auto within its flow root or the container it scrolls within
 * -> absolutely positioned elements that have height and width set to auto are sized to fit their contents
 */
/* Dealing with floats: takes up space until filling the containing box and then wrap to next line
  -> may need to force an item to move below any floated elements like headings on their own line so you need to use clear
*/
.left {
  float: left;
  background: pink;
}

.right {
  float: right;
  background: cyan;
}
/* if element only has floated elements, height collapses to nothing so you need to self-clear its children with a clearfix */
#container::after {
  content: "";
  display: block;
  clear: both;
}
/* Using z-index */
.dashed-box {
  position: relative;
  z-index: 1;
}

.top-box {
  position: absolute;
  z-index: 2;
}

/* 
 * IX. CSS Animations 
 * - animation property to animate CSS properties like color, background-color, height, width
 * - needs to be defined with @keyframes at-rule; tells what should happen at specific moments
 */
.element {
  animation: pulse 5s infinite;
}

@keyframes pulse {
  0% {
    background-color: #595959;
  }
  100% {
    background-color: #ffffff;
  }
}
/*
 * - 8 sub-properties of animation
 * 1. animation-name: name of @keyframes at-rule
 * 2. animation-duration: length of time it takes for animation to complete one cycle
 * 3. animation-timing-function: establishes preset acceleration curves such as ease or linear
 * 4. animation-delay: time between element being loaded and start of animation sequence
 * 5. animation-direction: sets direction of animation after cycle; default resets on each cycle
 * 6. animation-iteration-count: number of times animation should perform
 * 7. animation-fill-mode: sets which valules applied before/after animation
 * 8. animation-play-state: pause/play animation
 * - can have multiple steps and can comma-separate shared properties in keyframes rule like 0%, 100% { ...some styles... }
 * - can have multiple animations and comma-separate them on a selector
 * - performance is a concern though one can animate transform: translate()/scale()/rotate() and opacity safely
 * - typically animated properties are colors and numbers but one cannot animate things like background-image
 * - may need vendor prefixes like -webkit-animation/-moz-animation/-o-animation for older browsers
 */
@keyframes stretch {
  /* declare animation actions here */
}

.element {
  animation-name: stretch;
  animation-duration: 1.5s;
  animation-timing-function: ease-out;
  animation-delay: 0s;
  animation-direction: alternate;
  animation-iteration-count: infinite;
  animation-fill-mode: none;
  animation-play-state: running;
}

/*
  is the same as:
*/

.element {
  animation: stretch 1.5s ease-out 0s alternate infinite none running;
}

/*
 * X. Dealing with Images
 * 1. CSS Sprites: means of combining multiple images into a single image file for use on a website to help with performance
 * - get image once, shift it around and only display parts of it to avoid overhead of having to fetch multiple images
 * - several images can be loaded with single HTTP request; browsers limit number of concurrent requests a site can make and HTTP requests require
 * handshaking; important for same reason one minifies and concatenates CSS and JS
 * - once you have sprite can set background image and adjust background-position and dimensions to only show the piece of image that you want
 * 2. Data URIs: can embed image directly into stylesheet and avoids additional HTTP requests for images
 * - i.e. url(data:image/gif;base64,...); data:[<mime type>][;charset=<charset>][;base64],<encoded data>
 * - don't work in IE 5-7 but supported in IE8, GZip compression may help with size of embedded code
 * - may still be slower than just using binary source link like <img> tag with src attribute
 * 3. Icon Fonts: also combine multiple images into single request
 * 4. SVGs: image format for vector graphics (Scalable Vector Graphics)
 * - why use this? small file sizes that compress well, scales to any size without losing clarity, looks great on retina displays, design control like interactivity and filters
 * - can use it directly in <img> tag; works everywhere except IE8 and down
 * - if not supported, can just change the src to a png/jpg file like <img src="image.svg" onerror="this.onerror=null; this.src='image.png'">
 * - may be bloated as well in the document and inability to cache like data URI
 */

/*
  * XI. CSS Preprocessors
  * 1. Sass: takes preprocessed Sass file and save it as normal CSS file to use in wesite
  * - variables like $font-stack: Helvetica, sans-serif;, nesting of CSS selectors, partials (contains little snippets of CSS that you can include in other Sass files) used
  * with @import directive and named like _partial.scss, import (creates another HTTP request for each one but eventually serve a single CSS file to browser),
  * mixins (groups of CSS declarations that you can reuse throughout your site like vendor prefixes), extend/inheritance to share a set of CSS properties from one selector to another,
  * and operators
  * 2. Less (Leaner Style Sheets): backwards-compatible language extension for CSS
  * - variables like @nice-blue: #5B83AD;, mixins (including bunch of properties from one rule-set into another rule-set)
  * i.e. #menu a { color: #111; .bordered; }, nesting of styles to mimic structure of HTML; nested at-rules and bubbling, arithmetic operations,
  * using escaping to allow you to use any arbitrary string as property or variable value, functions, namespace and accessors, scopes for variables, comments,
  * and importing like @import "library"
  * 3. PostCSS: transform styles with JS plugins; can lint CSS, support variables and mixins, transpile future CSS syntax, inline images
  * i.e. Autoprefixer, plugins to solve global CSS, future CSS, readability, images and fonts, linting
  */

/*
 * XII. CSS Naming Conventions
 * 1. Block, Element, Modifier (BEM): way to name your classes
 * - .block {}, .block__element {} (helps to form block as a whole), .block--modifier (modifies element or block)
 * - don't try to mimic the DOM tree and go so many levels deep otherwise it's too verbose with class names
 * (nested HTML elements are a DOM tree, names of classes you write are BEM-tree)
 * 2. Object Oriented CSS (OOCSS): keeping structure and skin separate, separating container and content
 * - reusing visual classes like having general .button element and adding more styles later
 * - rarely use location-dependent styles, don't cascade but go straight into object i.e. .list-item rather than ul li.list-item
 * 3. Scalable and Modular Architecture for CSS (SMACSS): more styleguide than rigid framework
 * - having base, layout, module, state, and theme rules; changing state
 * 4. Atomic CSS (ACSS): only use reusable classes like .mt-20 (margin-top 20), .fl (float left), one declaration per selector
 * - putting styling back to markup, can't affect layout anymore with media queries however but would have to send different markup for every device
 * or would have to do something like JS responsive elements which adds classes to elements depending on viewport width
 * - creating utility classes to sprinkle throughout
 */

/*
 * XIII. CSS Performance/Quality Considerations
 * - minify CSS file, don't inline large data URIs, don't inline CSS attributes to avoid code duplication
 * - deep nesting of selectors can affect performance
 * -> styles resolved during renderer's layout pass; selectors resolved right to left, exiting when it has been detected the selector doesn't match
 * -> i.e. ul.user-list li span a:hover; every a tag must be inspected to see if resides inside a span and a list = lots of DOM walking
 * - no image spriting/compressions
 * - can organize scales variables for things like color, z-index, font-size, type scale; use simple mixins
 * -> mixins for grouping browser-specific code or as powerful ways to contain functionality
 * -> mixins not a good way to add additional styles to an element as you will be sending duplicate styles over the wire
 * -> can encapsulate vendor prefixes i.e. .transition(@transition) { -webkit-transition: @transition, -moz-transition, -ms-transition, -o-transition, transition }
 * - prefer components over page level styles, consistent naming convention
 * - structure HTML to load critical, above-the-fold content first
 */

/* 
 * XIV. CSS Practice Layouts
 */

/* 
 * Media Queries
 */
@media (min-width: 700px) {
  .wrapper {
    grid-template-columns: repeat(9, 1fr);
    grid-template-areas:
      "hd hd hd hd   hd   hd   hd   hd   hd"
      "sd sd sd main main main main main main"
      "sd sd sd  ft  ft   ft   ft   ft   ft";
  }
}

@media (min-width: 1280px) {
  .wrapper {
    grid-template-areas:
      "hd hd hd   hd   hd   hd   hd   hd hd"
      "sd sd main main main main main ft ft";
  }
}

/*
 * Vertically and horizontally centering with flexbox
 */
.box {
  display: flex;
  align-items: center;
  justify-content: center;
}

.box div {
  width: 100px;
  height: 100px;
}

/*
 * Establishing responsive layout with CSS Grid (header, side nav, body, footer at bottom)
 * - single column in mobile
 * - adding sidebar at breakpoint i.e. tablet
 * - 3-column layout for wider laptop/desktop screens
 Markup:
 div.wrapper
  header.main-head
  nav.main-nav
    ul
      li a
      li a
      li a
  article.content
    h1
    p
  aside.side
  div.ad
  footer.main-footer
 */
/* Mobile layout single column */
.main-head {
  grid-area: header;
}
.content {
  grid-area: content;
}
.main-nav {
  grid-area: nav;
}
.side {
  grid-area: sidebar;
}
.ad {
  grid-area: ad;
}
.main-footer {
  grid-area: footer;
}
.wrapper {
  display: grid;
  grid-gap: 20px;
  grid-template-areas:
    "header"
    "nav"
    "content"
    "sidebar"
    "ad"
    "footer";
}
/* Two columns for 500px */
@media (min-width: 500px) {
  .wrapper {
    grid-template-columns: 1fr 3fr;
    grid-template-areas:
      "header  header"
      "nav     nav"
      "sidebar content"
      "ad      footer";
  }
  nav ul {
    display: flex;
    justify-content: space-between;
  }
}
/* 3 columns for 700px */
@media (min-width: 700px) {
  .wrapper {
    grid-template-columns: 1fr 4fr 1fr;
    grid-template-areas:
      "header header  header"
      "nav    content sidebar"
      "nav    content ad"
      "footer footer  footer";
  }
  nav ul {
    flex-direction: column;
  }
}

/* Flexible 12-column layout or X-column flexible grid */
.wrapper {
  display: grid;
  grid-template-columns: repeat(12, col-start 1fr);
  grid-gap: 20px;
}

.wrapper > * {
  grid-column: col-start / span 12;
}

@media (min-width: 500px) {
  .side {
    grid-column: col-start / span 3;
    grid-row: 3;
  }
  .ad {
    grid-column: col-start / span 3;
    grid-row: 4;
  }
  .content,
  .main-footer {
    grid-column: col-start 4 / span 9;
  }
  nav ul {
    display: flex;
    justify-content: space-between;
  }
}
/* Product Listing/Gallery/Cards with Auto-placement in CSS Grid */
.listing {
  list-style: none;
  margin: 2em;
  display: grid;
  grid-gap: 20px;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
}

.listing li {
  border: 1px solid #eee;
  border-radius: 5px;
  display: flex;
  flex-direction: column;
}

.listing .cta {
  margin-top: auto;
  border-top: 1px solid #eee;
  padding: 10px;
  text-align: center;
}

.listing .body {
  padding: 10px;
}
