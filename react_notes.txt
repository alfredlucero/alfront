React: frontend UI framework made by Facebook

* Elements describe the tree (plain objects describing DOM nodes/components), take in type or props
* Components encapsulate element trees, can be classes or functions
* For a React component, props are the input, and an element tree is the output
* It does a heuristic diffing algorithm to optimize the element trees and rerendering
* Class components can store local state and perform custom logic when the corresponding
  DOM node is created or destroyed
* Functional component has a single render() method
* Can optimize for props that are immutable as well to not rerender those areas
* Only class components are declared as instances and React creates it for us
* Props flow from parent to children as the parent component returned an element with its type and props
* An instance is what you refer to as 'this' in the component class to store local state and react to
  lifecycle events
* To create elements, use React.createElement(), JSX, or an element factory helper
* Updates through setState() cause the entire app to re-render or part through reconciling as a tree of nodes 
  that describe the app is generated and saved in memory
* Pull-based approach for React to make decisions for you for scheduling renders to be implemented in Fiber
  as currently an update results in the entire subtree being re-rendered immediately
* Fiber is a virtual stack frame and reimplementation of the stack specialized for React components to 
  potentially be used for concurrency or error boundaries

i.e. Top-down reconciliation from Form -> Button -> 'button' type when calling
	 ReactDOM.render() or setState()
	 - Different component types assumed to generate different trees so replaces the old tree completely
	 - Diffing of lists is performed using keys that should be stable, predictable, and unique
ReactDOM.render({
	type: Form,
	props: {
		isSubmitted: false,
		buttonText: 'OK!'
	}
}, document.getElementById('root'));