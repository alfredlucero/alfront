Redis:

- In-memory database (NoSQL); key-value store
- Used for session caches, pub-sub, transactions, etc.
- brew install redis
- brew services start redis
- brew services stop redis
- redis-cli to connect to server; ping to see if we get pong back

Data Types:

Strings (both text and binary allowed, 512mb max)
- Use cases: images, html fragment, json

set key1 value
get key1

incr decr

append

setrange

strlen

mget mset

Lists (linked lists, allows duplicates, indexes, ordered)
- Use cases: logging, monitoring

rpush key value1 value2

Hashes (like objects, key and value are strings)
- Use cases: session info

hset key field value

Sets (unordered, no duplicates, unique members)
- Use cases: user data, logins

sadd key element1 element2 element3

Sorted Sets (ordered, score associated for every element, no duplicates, unique members)
- Use cases: voting, counts

zadd key score element

Commands:

Set a key-value pair

set key value

Get a value given a key

get key

Multiple set

mset key1 value1 key2 value2

Read out all the keys

KEYS pattern

Delete a key

DEL key

Dealing with Strings:

set prog_lang javascript
get prog_lang (javascript)

mset db_name mongodb server_name apache ide vscode
mget db_name server_name ide (mongodb apache vscode)

strlen db_name (7)

set num_visits 1000
incr num_visits (1001)
decr num_visits (1000)
incrby num_visits 10 (1010)
decrby num_visits 10 (1000)

getset num_visits 1010 (1000 prev value)
get num_visits (1010)

set name Alfred
get name Alfred
append name Lucero
get name (AlfredLucero)

setrange name 3 blah
get name (Alfblahucero)

exists name (1)

expire name 2 (expire after 2 seconds)
get name (nil)

set name alfred
type name (string)

Dealing with Lists:

simple list of strings maintaining insertion order, supports more than 4 billion elements in a single list

lpush rpush can add elements to head and tail of the list

lpush lpop
llen lrange
lset lrem
lrange
lindex

lpush fruits apple orange

lrange fruits 0 1 (apple orange)

lpop fruits (orange)

lindex fruits 0 (apple)

lrem fruits 1 apple (removes 1 apple from list)

Dealing with Hashes:

hset session_info user1 pwd1 (1)

hmset session_info user2 pwd2 user3 pwd3 

hget session_info user1

hexists session_info user1

hgetall session_info

hkeys session_info

hvals session_info

hlen session_info

hdel session_info user3

Dealing with Sets:

Every member is unique. Every set can store more than 4 billion members
Can find union, intersection, differences

sadd dbs oracle sqlserver mysql

smembers dbs (list them out)

sismember dbs mysql (1)

srem dbs mysql (1) - removes mysql

spop dbs 

sadd dbs2 mongodb redis cassandra

sinter dbs dbs2 (intersection)

sunion dbs dbs2 (union)

Dealing with Sorted Sets:

Score associated, every member unique, scores can repeat

zadd prog-langs 0 javascript
zadd prog-langs 1 python
zadd prog-langs 4 C#
zadd prog-langs 7 ruby

zcard prog-langs (number of scores)

zrange prog-langs 0 2

zrangebyscore prog-langs 0 3

zcount prog-langs 0 10

zrem prog-langs C#

zincrby prog-langs 30 python 


Redis Transactions:

Multi
Exec
Discard
Watch

After issuing MULTI command, all the next commands will be queued
Commit transaction using EXEC command - similar to COMMIT in SQL
Uncommit transaction using DISCARD command - similar to ROLLBACK in SQL, aborts Transaction from happening
Conditional Transaction using WATCH command
- if any watched key is modified outside the transaction, command will prevent entire transaction from committing

Multi -> Commands -> Exec

multi

set username user001 (queued)
set loggedin 1 (queued)

set items_in_cart 10 (queued)

incr items_in_cart (queued)

exec (OK...11)

get items_in_cart (11)

--

multi

set username user002 (queued)

set loggedin 1 (queued)

discard (OK - transaction aborted)

get username (user001)

--

set year_released 2000

watch year_released (OK)

multi

set year_released 2019 (queued)

// Separate terminal

incr year_released (2001)

// Back to main terminal
exec (nil) since watch key changed outside transaction

get year_released (2001)

Redis as a messaging system:

- pub sub for event-driven software
- no exchanges in redis like rabbitmq
- pattern based subscription/unsubscription

subscribe and psubscribe for subscribing to a channel
p for pattern based subscribing
unsubscribe and punsubscribe

publish newschannel test0001News

subscribe newschannel (receives new messages that are published to channel)

publish newschannel test0002News

publish latestnewschannel testnews001_news

psubscribe *news* (subscribes to both news channels)

publish latestnewschannel testnews002_news

Redis Batch Operation:

redis-cli < commands.txt

cat commands.txt | redis-cli --pipe

Using node_redis:

npm install redis

client.set("somekey", "somevalue");

// more redis type commands
